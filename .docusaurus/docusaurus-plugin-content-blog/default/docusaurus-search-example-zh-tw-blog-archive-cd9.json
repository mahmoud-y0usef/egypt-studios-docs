{
  "blogPosts": [
    {
      "id": "writing-good-unit-tests",
      "metadata": {
        "permalink": "/docusaurus-search-example/zh-TW/blog/writing-good-unit-tests",
        "editUrl": "https://github.com/easyops-cn/docusaurus-search-example/edit/master/blog/blog/2019-06-15-writing-good-unit-tests.md",
        "source": "@site/blog/2019-06-15-writing-good-unit-tests.md",
        "title": "编写良好的单元测试",
        "description": "本文转载自 https://wangshenwei.com/writing-good-unit-tests/ 。",
        "date": "2019-06-15T00:00:00.000Z",
        "formattedDate": "2019年6月15日",
        "tags": [],
        "readingTime": 7.48,
        "truncated": false,
        "authors": [
          {
            "name": "Wang Shenwei",
            "url": "https://github.com/weareoutman",
            "imageURL": "https://avatars2.githubusercontent.com/u/2338946?s=460&v=4"
          }
        ],
        "frontMatter": {
          "slug": "writing-good-unit-tests",
          "title": "编写良好的单元测试",
          "author": "Wang Shenwei",
          "author_url": "https://github.com/weareoutman",
          "author_image_url": "https://avatars2.githubusercontent.com/u/2338946?s=460&v=4"
        },
        "nextItem": {
          "title": "Welcome",
          "permalink": "/docusaurus-search-example/zh-TW/blog/welcome"
        }
      },
      "content": ":::note\n本文转载自 https://wangshenwei.com/writing-good-unit-tests/ 。\n:::\n\n> “万物之始，大道至简”\n\n本文尝试从简单的单元测试思想着手，探讨如何编写良好的单元测试。以下将主要基于 [TypeScript], [Jest], [React], [Enzyme] 给出示例。关于单元测试的[基本概念和重要性]不在本文讨论范围。\n\n## 基本方法\n\n编写单元测试的基本方法其实很简单：\n\n1. 给定输入\n2. 运行\n3. 断言输出\n\n而一个好的单元测试的要求也很简单：\n\n- 覆盖足够的输入场景\n- 进行充分的输出断言\n\n一个最简单的例子：\n\n```ts\n// `add.ts`\nfunction add(a: number, b: number): number {\n  return a + b;\n}\n```\n\n```ts\n// `add.spec.ts`\ntest(\"add(1, 2) should return 3\", () => {\n  expect(add(1, 2)).toBe(3);\n});\n```\n\n我们编写单元测试的步骤如下：\n\n1. 给定输入：`1`, `2`\n2. 运行： `add(...)`\n3. 断言输出：`expect(...).toBe(3)`\n\n是不是很简单？当然，真实业务场景下我们要测试的单元远比上述例子复杂得多。\n\n- 输入更加复杂，除了普通的函数输入参数，还可能有外部的事件，因此难以覆盖所有场景\n- 输出更加复杂，除了普通的函数输出结果，还可能有对外部的副作用，因此难以断言运行结果\n\n> 这里提到的*输入*、*输出*不再是狭义上的函数输入、输出。我们将所有可能影响测试对象行为的外部因素都称之为输入，将所有测试对象运行后对外部造成的影响都称之为输出。这样理解之后，我们就可以化繁为简，将测试过程回归到前面提到的最基本的方法上。\n\n所以编写良好的单元测试首先要做的就是厘清测试对象的输入、输出，掌握覆盖不同形式的输入、断言不同形式的输出的方法。我们将分开讨论它们。\n\n## 输入\n\n足够简单的输入让我们可以花更少的时间、覆盖更多的场景。输入的来源大致有以下几种：\n\n- 普通变量参数\n- 外部依赖发送的事件\n- GUI 操作事件\n\n编写测试覆盖它们的复杂度依次增大。除了第一个，其它都可以看作*外部事件*，也可以理解为*来自外界的副作用*。对于普通变量参数，我们只需构造这些参数即可完成*给定输入*的任务。而对于外部事件，我们要做的就是想办法触发这些事件。\n\n我们依然看一个简单的例子：\n\n```ts\n// `MyComponent.ts`\nwindow.addEventListener(\"resize\", () => { ... });\n```\n\n如何覆盖？主动发送这个事件：\n\n```ts\n// `MyComponent.spec.ts`\ntest(\"MyComponent\", () => {\n  window.dispatchEvent(new Event(\"resize\"));\n  // ...\n});\n```\n\n再看一个例子：\n\n```ts\n// `MyComponent.tsx`\nconst handleChange = (value: string): void => { ... };\nreturn <Editor onChange={handleChange} />\n```\n\n如何覆盖依赖组件的特定事件？主动触发依赖组件的事件：\n\n```ts\n// `MyComponent.spec.tsx`\ntest(\"MyComponent\", () => {\n  const wrapper = shallow(<MyComponent />);\n  wrapper.find(Editor).invoke(\"onChange\")(\"faked value\");\n  // ...\n});\n```\n\n## 输出\n\n足够简单的输出让我们可以更容易地断言运行结果。输出的形态大致有以下几种：\n\n- 普通变量输出\n- GUI 的变化\n- 外部依赖的调用\n\n在测试中对它们进行断言的复杂度依次增大。除了第一个，其它都可以看作*对外界的副作用*。对于普通变量输出，我们只需简单地断言它的值即可。而对于对外界的副作用，我们要做的就是想办法断言这些副作用的影响。\n\n我们继续看一个简单的例子：\n\n```ts\n// `handleClick.ts`\nfunction handleClick(): void {\n  history.push(\"/next/url\");\n}\n```\n\n如何断言？我们可以断言副作用的影响结果：\n\n```ts\n// `handleClick.spec.ts`\ntest(\"handleClick\", () => {\n  handleClick();\n  expect(history.location.pathname).toBe(\"/next/url\");\n});\n```\n\n有时副作用所影响的结果难以断言，或者该依赖被 *Mocked*，那么我们可以监视该副作用的触发点是否被正确调用了：\n\n```ts\n// `handleClick.spec.ts`\ntest(\"handleClick\", () => {\n  const spyOnHistoryPush = jest.spyOn(history, \"push\");\n  expect(spyOnHistoryPush).toBeCalledWith(\"/next/url\");\n});\n```\n\n再看一个 React 组件的例子：\n\n```ts\n// `MyComponent.tsx`\nconst handleValidation = (valid: boolean): void => {\n  this.setState({ valid });\n}\nreturn <Form.Item className={ this.state.valid ? \"valid\" : \"invalid\" }><Input /></Form.Item>;\n```\n\n如何断言？判断依赖组件的变化：\n\n```ts\n// `MyComponent.spec.tsx`\ntest(\"MyComponent\", () => {\n  const wrapper = shallow(<MyComponent />);\n  // ... after something trigger `handleValidation()`\n  expect(wrapper.find(Form.Item).prop(\"className\")).toBe(\"invalid\");\n});\n```\n\n始终记得要断言测试对象运行后对外界的副作用影响。\n\n另外断言的目标应该是*对外的影响*，而不是*内部状态*，因为内部状态并不是测试对象的*输出*。一个错误的例子：\n\n```ts\n// `MyComponent.bad.spec.tsx`\nexpect(wrapper.instance().state.valid).toBe(\"invalid\");\n```\n\n## 重构与拆分\n\n更简单的输入、输出让我们可以更容易地编写好的单元测试，但往往实际情况是业务需求不断增长，组件内部逻辑不断复杂化，输入输出的形式形态更加多样化，为组件编写单元测试的难度也随之陡增。\n\n**适时地重构与拆分**是解决这个问题的关键。在如今的前端组件化的模式下尤为重要，合理拆分后的组件可以让每个测试单元的输入输出都变得更少、更聚焦。诸如 React, [Redux] 等主流框架和工具推崇的[单向数据流]盛行的其中一个原因就是它们巧妙地让各个单元的输入来源、输出影响单一化，从而降低编写单元测试的难度，同时提升组件集成时的信心。\n\n## 总结\n\n编写良好的单元测试总结下来就是三条：\n\n- 识别测试对象的输入、输出\n- 掌握不同形态下的输入覆盖、输出断言的方法\n- 适时地重构与拆分\n\n希望以上内容对大家有所帮助。\n\n[TypeScript]: https://www.typescriptlang.org/\n[Jest]: https://jestjs.io/\n[React]: https://reactjs.org/\n[Enzyme]: https://airbnb.io/enzyme/\n[Redux]: https://redux.js.org/\n[单向数据流]: https://flaviocopes.com/react-unidirectional-data-flow/\n[基本概念和重要性]: https://zh.wikipedia.org/wiki/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95"
    },
    {
      "id": "welcome",
      "metadata": {
        "permalink": "/docusaurus-search-example/zh-TW/blog/welcome",
        "editUrl": "https://github.com/easyops-cn/docusaurus-search-example/edit/master/blog/blog/2019-05-30-welcome.md",
        "source": "@site/blog/2019-05-30-welcome.md",
        "title": "Welcome",
        "description": "Blog features are powered by the blog plugin. Simply add files to the blog directory. It supports tags as well!",
        "date": "2019-05-30T00:00:00.000Z",
        "formattedDate": "2019年5月30日",
        "tags": [
          {
            "label": "facebook",
            "permalink": "/docusaurus-search-example/zh-TW/blog/tags/facebook"
          },
          {
            "label": "hello",
            "permalink": "/docusaurus-search-example/zh-TW/blog/tags/hello"
          },
          {
            "label": "docusaurus",
            "permalink": "/docusaurus-search-example/zh-TW/blog/tags/docusaurus"
          }
        ],
        "readingTime": 0.175,
        "truncated": false,
        "authors": [
          {
            "name": "Yangshun Tay",
            "title": "Front End Engineer @ Facebook",
            "url": "https://github.com/yangshun",
            "imageURL": "https://avatars0.githubusercontent.com/u/1315101?s=400&v=4"
          }
        ],
        "frontMatter": {
          "slug": "welcome",
          "title": "Welcome",
          "author": "Yangshun Tay",
          "author_title": "Front End Engineer @ Facebook",
          "author_url": "https://github.com/yangshun",
          "author_image_url": "https://avatars0.githubusercontent.com/u/1315101?s=400&v=4",
          "tags": [
            "facebook",
            "hello",
            "docusaurus"
          ]
        },
        "prevItem": {
          "title": "编写良好的单元测试",
          "permalink": "/docusaurus-search-example/zh-TW/blog/writing-good-unit-tests"
        },
        "nextItem": {
          "title": "Hello",
          "permalink": "/docusaurus-search-example/zh-TW/blog/hello-world"
        }
      },
      "content": "Blog features are powered by the blog plugin. Simply add files to the `blog` directory. It supports tags as well!\n\nDelete the whole directory if you don't want the blog features. As simple as that!"
    },
    {
      "id": "hello-world",
      "metadata": {
        "permalink": "/docusaurus-search-example/zh-TW/blog/hello-world",
        "editUrl": "https://github.com/easyops-cn/docusaurus-search-example/edit/master/blog/blog/2019-05-29-hello-world.md",
        "source": "@site/blog/2019-05-29-hello-world.md",
        "title": "Hello",
        "description": "Welcome to this blog. This blog is created with Docusaurus 2 alpha.",
        "date": "2019-05-29T00:00:00.000Z",
        "formattedDate": "2019年5月29日",
        "tags": [
          {
            "label": "hello",
            "permalink": "/docusaurus-search-example/zh-TW/blog/tags/hello"
          },
          {
            "label": "docusaurus",
            "permalink": "/docusaurus-search-example/zh-TW/blog/tags/docusaurus"
          }
        ],
        "readingTime": 0.12,
        "truncated": true,
        "authors": [
          {
            "name": "Endilie Yacop Sucipto",
            "title": "Maintainer of Docusaurus",
            "url": "https://github.com/endiliey",
            "imageURL": "https://avatars1.githubusercontent.com/u/17883920?s=460&v=4"
          }
        ],
        "frontMatter": {
          "slug": "hello-world",
          "title": "Hello",
          "author": "Endilie Yacop Sucipto",
          "author_title": "Maintainer of Docusaurus",
          "author_url": "https://github.com/endiliey",
          "author_image_url": "https://avatars1.githubusercontent.com/u/17883920?s=460&v=4",
          "tags": [
            "hello",
            "docusaurus"
          ]
        },
        "prevItem": {
          "title": "Welcome",
          "permalink": "/docusaurus-search-example/zh-TW/blog/welcome"
        },
        "nextItem": {
          "title": "Hola",
          "permalink": "/docusaurus-search-example/zh-TW/blog/hola"
        }
      },
      "content": "Welcome to this blog. This blog is created with [**Docusaurus 2 alpha**](https://v2.docusaurus.io/).\n\n<!--truncate-->\n\nThis is a test post.\n\nA whole bunch of other information."
    },
    {
      "id": "hola",
      "metadata": {
        "permalink": "/docusaurus-search-example/zh-TW/blog/hola",
        "editUrl": "https://github.com/easyops-cn/docusaurus-search-example/edit/master/blog/blog/2019-05-28-hola.md",
        "source": "@site/blog/2019-05-28-hola.md",
        "title": "Hola",
        "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet",
        "date": "2019-05-28T00:00:00.000Z",
        "formattedDate": "2019年5月28日",
        "tags": [
          {
            "label": "hola",
            "permalink": "/docusaurus-search-example/zh-TW/blog/tags/hola"
          },
          {
            "label": "docusaurus",
            "permalink": "/docusaurus-search-example/zh-TW/blog/tags/docusaurus"
          }
        ],
        "readingTime": 0.12,
        "truncated": false,
        "authors": [
          {
            "name": "Gao Wei",
            "title": "Docusaurus Core Team",
            "url": "https://github.com/wgao19",
            "imageURL": "https://avatars1.githubusercontent.com/u/2055384?v=4"
          }
        ],
        "frontMatter": {
          "slug": "hola",
          "title": "Hola",
          "author": "Gao Wei",
          "author_title": "Docusaurus Core Team",
          "author_url": "https://github.com/wgao19",
          "author_image_url": "https://avatars1.githubusercontent.com/u/2055384?v=4",
          "tags": [
            "hola",
            "docusaurus"
          ]
        },
        "prevItem": {
          "title": "Hello",
          "permalink": "/docusaurus-search-example/zh-TW/blog/hello-world"
        }
      },
      "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"
    }
  ]
}